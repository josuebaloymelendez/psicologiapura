//
// Hover.css (http://ianlunn.github.io/Hover/)
// Version: 2.3.1
// Author: Ian Lunn @IanLunn
// Author URL: http://ianlunn.co.uk/
// Github: https://github.com/IanLunn/Hover
//
// Hover.css Copyright Ian Lunn 2017. Generated with Sass.
//
// Gutted, pruned, re-inflated, and reorganized 2018 by Tim Robinson for Edlio
//
//

// HACKS

// As is often the case, some devices/browsers need additional code to get CSS to work
// in the most desired way. These mixins are used to quickly drop in hacks for each element
// Find out more here: https://github.com/IanLunn/Hover/wiki/Hacks-Explained

@mixin hardwareAccel {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	transform: perspective(1px) translateZ(0);
}

@mixin improveAntiAlias {
	// Improve aliasing on mobile/tablet devices
	box-shadow: 0 0 1px rgba(0, 0, 0, 0);
}

@mixin forceBlockLevel {
	// Transforms need to be block-level to work
	display: inline-block;
	vertical-align: middle;
}

@mixin hacks {
	@include forceBlockLevel();
	@include hardwareAccel();
	@include improveAntiAlias();
}

// 2d Transitions

// Forward
@mixin forward($duration: .3s, $distance: 8px) {
	@include hacks;
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover { transform: translateX($distance); }
}

// Backward
@mixin backward($duration: .3s, $distance: 8px) {
	@include forward($duration, #{-$distance});
}

// Bob
@mixin bob-keyframes($distance) {
	@at-root {
		@keyframes bob {
			0% { transform: translateY(#{$distance}); }
			50% { transform: translateY(#{$distance/2}); }
			100% { transform: translateY(#{$distance}); }
		}

		@keyframes bob-float {
			100% { transform: translateY(#{$distance}); }
		}
	}
}

@mixin bob($duration1: .3s, $duration2: 1.5s, $distance: -8px) {
	@include hacks;
	@include bob-keyframes($distance);

	@include hover {
		animation: {
			name: bob-float, bob;
			duration: $duration1, $duration2;
			delay: 0s, $duration1;
			timing-function: ease-out, ease-in-out;
			iteration-count: 1, infinite;
			fill-mode: forwards;
			direction: normal, alternate;
		}
	}
}

// Bounce Base (do not call directly)
@mixin bounce-base($duration, $scale) {
	@include hacks;
	transition-duration: $duration;

	@include hover {
		transform: scale($scale);
		transition-timing-function: cubic-bezier(.47,2.02,.31,-0.36);
	}
}

// Bounce In
@mixin bounce-in($duration: .5s, $scale: 1.2) {
	@include bounce-base($duration, $scale)
}

// Bounce Out
@mixin bounce-out($duration: .5s, $scale: .8) {
	@include bounce-base($duration, $scale)
}

// Buzz
@mixin buzz-keyframes($distance, $spin) {
	@at-root {
		@keyframes buzz {
			50% { transform: translateX(#{$distance}) rotate(#{$spin}); }
			100% { transform: translateX(#{-$distance}) rotate(#{-$spin}); }
		}
	}
}

@mixin buzz($duration: .15s, $distance: 3px, $spin: 2deg) {
	@include hacks;
	@include buzz-keyframes($distance, $spin);
	@include hover {
		animation: {
			name: buzz;
			duration: $duration;
			timing-function: linear;
			iteration-count: infinite;
		}
	}
}

// Buzz Out
@mixin buzz-out-keyframes($distance, $spin) {
	@at-root {
		@keyframes buzz-out {
			10% { transform: translateX(#{$distance}) rotate(#{$spin}); }
			20% { transform: translateX(#{-$distance}) rotate(#{-$spin}); }
			30% { transform: translateX(#{$distance}) rotate(#{$spin}); }
			40% { transform: translateX(#{-$distance}) rotate(#{-$spin}); }
			50% { transform: translateX(#{$distance*(2/3)}) rotate(#{$spin/2}); }
			60% { transform: translateX(#{-$distance*(2/3)}) rotate(#{-$spin/2}); }
			70% { transform: translateX(#{$distance*(2/3)}) rotate(#{$spin/2}); }
			80% { transform: translateX(#{-$distance*(2/3)}) rotate(#{-$spin/2}); }
			90% { transform: translateX(#{$distance*(1/3)}) rotate(0); }
			100% { transform: translateX(#{-$distance*(1/3)}) rotate(0); }
		}
	}
}

@mixin buzz-out($duration: .75s, $distance: 3px, $spin: 2deg) {
	@include hacks;
	@include buzz-out-keyframes($distance, $spin);
	@include hover {
		animation: {
			name: buzz-out;
			duration: $duration;
			timing-function: linear;
			iteration-count: 1 
		}
	}
}

// Float
@mixin float($duration: .3s, $distance: -8px) {
	@include hacks;
	transition: {
		duration: $duration;
		property: transform;
		timing-function: ease-out;
	}

	@include hover { transform: translateY($distance); }
}

// Grow
@mixin grow($duration: .3s, $scale: 1.1) {
	@include hacks;
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover { transform: scale($scale); }
}

// Shrink
@mixin shrink($duration: .3s, $scale: .9) {
	@include grow($duration, $scale);
}

// Grow Rotate
@mixin grow-rotate($duration: .3s, $scale: 1.1, $rotation: 4deg) {
	@include hacks;
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover { transform: scale($scale) rotate($rotation); }
}

// Hang
@mixin hang-keyframes($distance) {
	@at-root {
		@keyframes hang {
			0% { transform: translateY(#{$distance}); }
			50% { transform: translateY(#{$distance/2}); }
			100% { transform: translateY(#{$distance}); }
		}

		@keyframes hang-sink {
			100% { transform: translateY(#{$distance}); }
		}
	}
}

@mixin hang($duration1: .3s, $duration2: 1.5s, $distance: 8px) {
	@include hacks;
	@include hang-keyframes($distance);
	@include hover {
		animation: {
			name: hang-sink, hang;
			duration: $duration1, $duration2;
			delay: 0s, $duration1;
			timing-function: ease-out, ease-in-out;
			iteration-count: 1, infinite;
			fill-mode: forwards;
			direction: normal, alternate;
		}
	}
}

// shared components for both Pop and Push

@mixin pop-keyframes($scale) {
	@at-root {
		@keyframes pop {
			50% { transform: scale(#{$scale}); }
		}
	}
}

@mixin pop-base($duration, $scale) {
	@include hacks;
	@include pop-keyframes($scale);
	@include hover {
		animation: {
			name: pop;
			duration: $duration;
			timing-function: linear;
			iteration-count: 1;
		}
	}
}

// Pop
@mixin pop($duration: .3s, $scale: 1.2) {
	@include pop-base($duration, $scale);
}

// Push
@mixin push($duration: .3s, $scale: .8) {
	@include pop-base($duration, $scale);
}

// Pulse Base
@mixin pulse-keyframes($scale) {
	@at-root {
		@keyframes pulse {
			to { transform: scale(#{$scale}); }
		}
	}
}

@mixin pulse-base( $scale, $duration: .3s) {
	@include hacks;
	@include pulse-keyframes($scale);
	@include hover {
		animation: {
			name: pulse;
			duration: $duration;
			timing-function: linear;
			iteration-count: infinite;
			direction: alternate;
		}
	}
}

// Pulse Grow
@mixin pulse-grow($duration: .3s, $scale: 1.1) {
	@include pulse-base($scale);
}

// Pulse Shrink
@mixin pulse-shrink($duration: .3s, $scale: .9) {
	@include pulse-base($scale);
}

// Pulse (continuous)
@mixin pulse2-keyframes($pulse-min, $pulse-max) {
	@at-root {
		@keyframes pulse2 {
			25% { transform: scale(#{$pulse-max}); }
			75% { transform: scale(#{$pulse-min}); }
		}
	}
}

@mixin pulse($duration: 1s, $pulse-min: .9, $pulse-max: 1.1) {
	@include hacks;
	@include pulse2-keyframes($pulse-min, $pulse-max);
	@include hover {
		animation: {
			name: pulse2;
			duration: $duration;
			timing-function: linear;
			iteration-count: infinite;
		}
	}
}

// Rotate
@mixin rotate($duration: .3s, $rotation: 4deg) {
	@include hacks;
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover { transform: rotate($rotation); }
}

// Sink
@mixin sink($duration: .3s, $distance: 8px) {
	@include hacks;
	transition: {
		duration: $duration;
		property: transform;
		timing-function: ease-out;
	}

	@include hover { transform: translateY($distance); }
}

// Skew
@mixin skew($duration: .3s, $rotation: 10deg) {
	@include hacks;
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover { transform: skew($rotation); }
}

// Skew Backward
@mixin skew-backward($duration: .3s, $rotation: 10deg) {
	@include skew($duration, $rotation);
	transition-origin: 0 100%;
}

// Skew Forward
@mixin skew-forward($duration: .3s, $rotation: -10deg) {
	@include skew($duration, $rotation);
	transition-origin: 0 100%;
}

// Wobble Base (do not call directly)
@mixin wobble-base($duration) {
	@include hacks;
	@include hover {
		animation: {
			duration: $duration;
			timing-function: ease-in-out;
			iteration-count: 1;
		}
	}
}

@mixin wobble-skew-keyframes($distance) {
	@at-root {
		@keyframes wobble-skew {
			16.65% { transform: skew(#{$distance}); }
			33.3% { transform: skew(#{-$distance/(6/5)}); }
			49.95% { transform: skew(#{$distance/2}); }
			66.6% { transform: skew(#{-$distance/3}); }
			83.25% { transform: skew(#{$distance/6}); }
			100% { transform: skew(0); }
		}
	}
}

@mixin wobble-translateX-keyframes($distance) {
	@at-root {
		@keyframes wobble-translateX {
			16.65% { transform: translateX(#{$distance}); }
			33.3% { transform: translateX(#{-$distance/(6/5)}); }
			49.95% { transform: translateX(#{$distance/2}); }
			66.6% { transform: translateX(#{-$distance/3}); }
			83.25% { transform: translateX(#{$distance/6}); }
			100% { transform: translateX(0); }
		}
	}
}

@mixin wobble-translateY-keyframes($distance) {
	@at-root {
		@keyframes wobble-translateY {
			16.65% { transform: translateY(#{$distance}); }
			33.3% { transform: translateY(#{-$distance/(6/5)}); }
			49.95% { transform: translateY(#{$distance/2}); }
			66.6% { transform: translateY(#{-$distance/3}); }
			83.25% { transform: translateY(#{$distance/6}); }
			100% { transform: translateY(0); }
		}
	}
}

@mixin wobble-translate-keyframes($distanceX, $distanceY) {
	@at-root {
		@keyframes wobble-translate {
			16.65% { transform: translate(#{$distanceX}, #{$distanceY}); }
			33.3% { transform: translate(#{-$distanceX/(6/5)}, #{-$distanceY/(6/5)}); }
			49.95% { transform: translate(#{$distanceX/2}, #{$distanceY/2}); }
			66.6% { transform: translate(#{-$distanceX/3}, #{-$distanceY/3}); }
			83.25% { transform: translate(#{$distanceX/6}, #{$distanceY/6}); }
			100% { transform: translate(0, 0); }
		}
	}
}

// Wobble Skew
@mixin wobble-skew($duration: 1s, $distance: -12deg) {
	@include wobble-base($duration);
	@include wobble-skew-keyframes($distance);
	@include hover {
		animation-name: "wobble-skew";
	}
}

// Wobble Bottom
@mixin wobble-bottom($duration: 1s, $distance: -12deg) {
	@include wobble-base($duration);
	@include wobble-skew-keyframes($distance);
	transform-origin: 100% 0;
	@include hover {
		animation-name: "wobble-skew";
	}
}

// Wobble Horizontal
@mixin wobble-horizontal($duration: 1s, $distance: 8px) {
	@include wobble-base($duration);
	@include wobble-translateX-keyframes($distance);
	@include hover {
		animation-name: "wobble-translateX";
	}
}

// Wobble To Bottom Right
@mixin wobble-to-bottom-right($duration: 1s, $distanceX: 8px, $distanceY: 8px) {
	@include wobble-base($duration);
	@include wobble-translate-keyframes($distanceX, $distanceY);
	@include hover {
		animation-name: "wobble-translate";
	}
}

// Wobble To Top Right
@mixin wobble-to-top-right($duration: 1s, $distanceX: 8px, $distanceY: -8px) {
	@include wobble-base($duration);
	@include wobble-translate-keyframes($distanceX, $distanceY);
	@include hover {
		animation-name: "wobble-translate";
	}
}

// Wobble Top
@mixin wobble-top($duration: 1s, $distance: -12deg) {
	@include wobble-base($duration);
	@include wobble-skew-keyframes($distance);
	transform-origin: 0 100%;
	@include hover {
		animation-name: "wobble-skew";
	}
}

// Wobble Vertical
@mixin wobble-vertical($duration: 1s, $distance: 8px) {
	@include wobble-base($duration);
	@include wobble-translateY-keyframes($distance);
	@include hover {
		animation-name: "wobble-translateY";
	}
}

// Background Transitions

// Back Pulse
@mixin back-pulse-keyframes($color) {
	@at-root {
		@keyframes back-pulse {
			50% {
				background-color: rgba($color, .75);
			}
		}
	}
}

@mixin back-pulse($duration: .5s, $bg-color: $primary-color, $text-color: $color-over-primary, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include hacks;
	@include back-pulse-keyframes($hover-bg);
	overflow: hidden;
	transition: {
		duration: $duration;
		property: color, background-color;
	}
	background-color: $bg-color;
	color: $text-color;

	@include hover-color($hover-text) {
		animation: {
			name: "back-pulse";
			duration: $duration;
			delay: $duration*2;
			timing-function: linear;
			iteration-count: infinite;
		}
	}
}

// basic bg effect mixin, used for all remaining bg transition effects
@mixin bg-base($duration, $hover-bg, $hover-text) {
	@include hacks;
	z-index: 0;
	transition: {
		duration: $duration;
		property: color;
	}

	@include mask-fullsize {
		z-index: -1;
		background: $hover-bg;
		transition: {
			property: transform;
			duration: $duration;
			timing-function: ease-out;
		}
	}

	@include hover-color($hover-text);
}

// Bounce base stuff (do not call directly)
@mixin bg-bounce-base($duration, $hover-bg, $hover-text) {
	@include bg-base($duration, $hover-bg, $hover-text);

	@include hover {
		&:before { transition-timing-function: cubic-bezier(.52,1.64,.37,.66); }
	}
}

// Bounce To Bottom
@mixin bounce-to-bottom($duration: .5s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-bounce-base($duration, $hover-bg, $hover-text);

	&:before {
		transform: scaleY(0);
		transform-origin: 50% 0;	
	}

	@include hover {
		&:before { transform: scaleY(1); }
	}
}

// Bounce To Left
@mixin bounce-to-left($duration: .5s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-bounce-base($duration, $hover-bg, $hover-text);

	&:before {
		transform: scaleX(0);
		transform-origin: 100% 50%;	
	}

	@include hover {
		&:before { transform: scaleX(1); }
	}
}

// Bounce To Right
@mixin bounce-to-right($duration: .5s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-bounce-base($duration, $hover-bg, $hover-text);

	&:before {
		transform: scaleX(0);
		transform-origin: 0 50%;	
	}

	@include hover {
		&:before { transform: scaleX(1); }
	}
}

// Bounce To Top
@mixin bounce-to-top($duration: .5s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-bounce-base($duration, $hover-bg, $hover-text);

	&:before {
		transform: scaleY(0);
		transform-origin: 50% 100%;	
	}

	@include hover {
		&:before { transform: scaleY(1); }
	}
}

// Fade
@mixin fade($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include hacks;
	overflow: hidden;
	transition: {
		duration: $duration;
		property: color, background-color;
	}

	@include hover-bg-color($hover-bg, $hover-text);
}

// Radial In
@mixin radial-in($duration: .3s, $bg-color: $primary-color, $text-color: $color-over-primary, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $bg-color, $text-color);
	background: $hover-bg;
	color: $hover-text;
	overflow: hidden;

	&:before { 
		transform: scale(2);
		border-radius: 100%;
	}

	@include hover {
		&:before { transform: scale(0); }
	}
}

// Radial Out
@mixin radial-out($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $hover-bg, $hover-text);
	overflow: hidden;

	&:before { 
		transform: scale(0); 
		border-radius: 100%;
	}

	@include hover {
		&:before { transform: scale(2); }
	}
}

// Rectangle In
@mixin rectangle-in($duration: .3s, $bg-color: $primary-color, $text-color: $color-over-primary, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $bg-color, $text-color);
	background: $hover-bg;
	color: $hover-text;

	&:before { transform: scale(1); }

	@include hover {
		&:before { transform: scale(0); }
	}
}

// Rectangle Out
@mixin rectangle-out($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $hover-bg, $hover-text);

	&:before { transform: scale(0); }

	@include hover {
		&:before { transform: scale(1); }
	}
}

// Shutter In Horizontal
@mixin shutter-in-horizontal($duration: .3s, $bg-color: $primary-color, $text-color: $color-over-primary, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $bg-color, $text-color);
	background: $hover-bg;
	color: $hover-text;

	&:before { transform: scaleX(1); }

	@include hover {
		&:before { transform: scaleX(0); }
	}
}

// Shutter In Vertical
@mixin shutter-in-vertical($duration: .3s, $bg-color: $primary-color, $text-color: $color-over-primary, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $bg-color, $text-color);
	background: $hover-bg;
	color: $hover-text;

	&:before { transform: scaleY(1); }

	@include hover {
		&:before { transform: scaleY(0); }
	}
}

// Shutter Out Horizontal
@mixin shutter-out-horizontal($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $hover-bg, $hover-text);

	&:before { transform: scaleX(0); }

	@include hover {
		&:before { transform: scaleX(1); }
	}
}

// Shutter Out Vertical
@mixin shutter-out-vertical($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $hover-bg, $hover-text);

	&:before { transform: scaleY(0); }

	@include hover {
		&:before { transform: scaleY(1); }
	}
}

// Sweep To Top
@mixin sweep-to-top($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $hover-bg, $hover-text);

	&:before {
		transform: scaleY(0);
		transform-origin: 50% 100%;
	}

	@include hover {
		&:before { transform: scaleY(1); }
	}
}

// Sweep To Bottom
@mixin sweep-to-bottom($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $hover-bg, $hover-text);

	&:before {
		transform: scaleY(0);
		transform-origin: 50% 0;
	}

	@include hover {
		&:before { transform: scaleY(1); }
	}
}

// Sweep To Left
@mixin sweep-to-left($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $hover-bg, $hover-text);

	&:before {
		transform: scaleX(0);
		transform-origin: 100% 50%;
	}

	@include hover {
		&:before { transform: scaleX(1); }
	}
}

// Sweep To Right
@mixin sweep-to-right($duration: .3s, $hover-bg: $secondary-color, $hover-text: $color-over-secondary) {
	@include bg-base($duration, $hover-bg, $hover-text);

	&:before {
		transform: scaleX(0);
		transform-origin: 0 50%;
	}

	@include hover {
		&:before { transform: scaleX(1); }
	}
}

// Border effects

// Border Fade
@mixin border-fade($duration: .3s, $hover-color: $border-color, $border-width: 4px) {
	@include hacks;
	transition: {
		duration: $duration;
		property: box-shadow;
	}
	box-shadow:
		inset 0 0 0 $border-width transparent,
		0 0 1px rgba(0, 0, 0, 0); // Hack to improve aliasing on mobile/tablet devices 

	@include hover {
		box-shadow: 
			inset 0 0 0 $border-width $border-color,
			0 0 1px rgba(0, 0, 0, 0); // Hack to improve aliasing on mobile/tablet devices 
	}
}

// Hollow
@mixin hollow($duration: .3s, $border-color: $primary-color, $border-width: 4px) {
	@include hacks;
	transition: {
		duration: $duration;
		property: background;
	}
	box-shadow:
		inset 0 0 0 $border-width $border-color,
		0 0 1px rgba(0, 0, 0, 0); // Hack to improve aliasing on mobile/tablet devices 

	@include hover {
		background: none;
	}
}

// Outline base
@mixin outline-base($duration, $border-width, $border-color, $padding-width) {
	@include hacks;
	@include mask{
		border: $border-color solid $border-width;
		transition: {
			duration: $duration;
			property: top, right, bottom, left;
		}
	}

	@include hover {
		&:before {
			top: -($padding-width + $border-width);
			right: -($padding-width + $border-width);
			bottom: -($padding-width + $border-width);
			left: -($padding-width + $border-width);
		}
	}
}

// Outline In 
@mixin outline-in($duration: .3s, $border-color: $primary-color, $border-width: 4px, $padding-width: 4px, $distance-ratio: 2) {
	@include outline-base($duration, $border-width, $border-color, $padding-width);

	@include mask {
		pointer-events: none;
		top: -($padding-width + $border-width) * $distance-ratio;
		right: -($padding-width + $border-width) * $distance-ratio;
		left: -($padding-width + $border-width) * $distance-ratio;
		bottom: -($padding-width + $border-width) * $distance-ratio;
		opacity: 0;
	}

	@include hover {
		&:before { opacity: 1; }
	}
}

// Outline Out 
@mixin outline-out($duration: .3s, $border-color: $primary-color, $border-width: 4px, $padding-width: 4px) {
	@include outline-base($duration, $border-width, $border-color, $padding-width);

	@include mask {
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
}

// Overline/underline base 
@mixin line-base($duration, $border-color, $border-size) {
	@include hacks;
	z-index: 0;
	overflow: hidden;

	@include mask {
		z-index: -1;
		background: $border-color;
		height: $border-size;
		transition: {
			duration: $duration;
			timing-function: ease-out;
		}
	}
}

// Overline From Center 
@mixin overline-from-center($duration: .3s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 51%;
		right: 51%;
		top: 0;
		transition-property: left, right;
	}

	@include hover {
		&:before {
			left: 0;
			right: 0;
		}
	}
}

// Overline From Left 
@mixin overline-from-left($duration: .3s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 0;
		right: 100%;
		top: 0;
		transition-property: right;
	}

	@include hover {
		&:before { right: 0; }
	}
}

// Overline From Right 
@mixin overline-from-right($duration: .3s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 100%;
		right: 0;
		top: 0;
		transition-property: left;
	}

	@include hover {
		&:before { left: 0; }
	}
}

// Overline Reveal 
@mixin overline-reveal($duration: .3s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 0;
		right: 0;
		top: 0;
		transform: translateY(-$border-size);
		transition-proerty: transform;
	}

	@include hover {
		&:before { transform: translateY(0); }
	}
}

// Underline From Center 
@mixin underline-from-center($duration: .3s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 51%;
		right: 51%;
		bottom: 0;
		transition-property: left, right;
	}

	@include hover {
		&:before {
			left: 0;
			right: 0;
		}
	}
}

// Underline From Left 
@mixin underline-from-left($duration: .3s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 0;
		right: 100%;
		bottom: 0;
		transition-property: right;
	}

	@include hover {
		&:before { right: 0; }
	}
}

// Underline From Right 
@mixin underline-from-right($duration: .3s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 100%;
		right: 0;
		bottom: 0;
		transition-property: left;
	}

	@include hover {
		&:before { left: 0; }
	}
}

// Underline Reveal 
@mixin underline-reveal($duration: .3s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 0;
		right: 0;
		bottom: 0;
		transform: translateY($border-size);
		transition-property: transform;
	}

	@include hover {
		&:before { transform: translateY(0); }
	}
}

// Reveal 
@mixin reveal($duration: .1s, $border-color: $primary-color, $border-size: 4px) {
	@include line-base($duration, $border-color, $border-size);

	&:before {
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		height: auto;
		background: none;
		border: 0 solid $border-color;
		transition-property: border-width;
	}

	@include hover {
		&:before {
			transform: translateY(0);
			border-width: $border-size;
		}
	}
}

// ripple base info 
@mixin ripple-keyframes($distance, $opacity) {
	@at-root {
		@keyframes ripple {
			100% {
				top: $distance;
				right: $distance;
				bottom: $distance;
				left: $distance;
				opacity: $opacity;
			}
		}
	}
}

@mixin ripple-base($duration, $border-color, $border-width, $ripple-distance, $opacity) {
	@include hacks;
	@include ripple-keyframes($ripple-distance, $opacity);

	@include mask {
		border: $border-color solid $border-width;
		animation-duration: $duration;
	}

	@include hover {
		&:before { animation-name: ripple; }
	}

}

// Ripple In 
@mixin ripple-in($duration: 1s, $border-color: $primary-color, $border-width: 4px, $ripple-ratio: 3) {
	$ripple-distance: $border-width * $ripple-ratio;
	@include ripple-base($duration, $border-color, $border-width, 0, 1);

	@include mask {
		top: -$ripple-distance;
		right: -$ripple-distance;
		bottom: -$ripple-distance;
		left: -$ripple-distance;
		opacity: 0;
	}
}

// Ripple Out 
@mixin ripple-out($duration: 1s, $border-color: $primary-color, $border-width: 6px, $ripple-ratio: 2) {
	$ripple-distance: $border-width * $ripple-ratio;
	@include ripple-base($duration, $border-color, $border-width, -$ripple-distance, 1);

	@include mask {
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}
}

// Round Corners 
@mixin round-corners($duration: .3s, $radius: 1em) {
	@include hacks;
	transition: {
		duration: $duration;
		property: border-radius;
	}

	@include hover {
		border-radius: $radius;
	}
}

// Trim 
@mixin trim ($duration: .3s, $border-width: 4px, $gap-width: 4px, $gap-color: $color-over-primary){
	@include hacks;

	@include mask {
		border: $gap-color solid $gap-width;
		top: $border-width;
		left: $border-width;
		right: $border-width;
		bottom: $border-width;
		opacity: 0;
		transition: {
			duration: $duration;
			property: opacity;
		}
	}

	@include hover {
		&:before { opacity: 1; }
	}
}

// Curl Effects

// Curls base stuff 
@mixin curl-base($duration, $reveal-area-color, $curl-line-color, $curl-transition-color, $curl-last-color, $curl-height, $curl-width, $shadow-amount, $curl-angle) {
	@include hacks;
	@include mask {
		pointer-events: none;
		height: 0;
		width: 0;
		background: linear-gradient(
			$curl-angle,
			$reveal-area-color 45%,
			$curl-line-color 50%,
			$curl-transition-color 56%,
			$curl-last-color 80%
		), $reveal-area-color;
		transition: {
			duration: $duration;
			property: width, height;
		}
	}

	@include hover {
		&:before {
			width: $curl-width;
			height: $curl-height;
		}
	}
}

// Curl Bottom Left 
@mixin curl-bottom-left($duration: .3s, $reveal-area-color: $jack-white, $curl-line-color: rgb(170,170,170), $curl-transition-color: rgb(204,204,204), $curl-last-color: $jack-white, $curl-height: 25px, $curl-width: 25px, $shadow-distance: 1px, $shadow-amount: .4) {
	@include curl-base($duration, $reveal-area-color, $curl-line-color, $curl-transition-color, $curl-last-color, $curl-height, $curl-width, $shadow-amount, 45deg);

	&:before {
		bottom: 0;
		left: 0;
		box-shadow: $shadow-distance #{-$shadow-distance} $shadow-distance rgba(0, 0, 0, $shadow-amount);
	}
}

// Curl Bottom Right 
@mixin curl-bottom-right($duration: .3s, $reveal-area-color: $jack-white, $curl-line-color: rgb(170,170,170), $curl-transition-color: rgb(204,204,204), $curl-last-color: $jack-white, $curl-height: 25px, $curl-width: 25px, $shadow-distance: 1px, $shadow-amount: .4) {
	@include curl-base($duration, $reveal-area-color, $curl-line-color, $curl-transition-color, $curl-last-color, $curl-height, $curl-width, $shadow-amount, 315deg);

	&:before {
		bottom: 0;
		right: 0;
		box-shadow: #{-$shadow-distance} #{-$shadow-distance} $shadow-distance rgba(0, 0, 0, $shadow-amount);
	}
}

// Curl Top Left 
@mixin curl-top-left($duration: .3s, $reveal-area-color: $jack-white, $curl-line-color: rgb(170,170,170), $curl-transition-color: rgb(204,204,204), $curl-last-color: $jack-white, $curl-height: 25px, $curl-width: 25px, $shadow-distance: 1px, $shadow-amount: .4) {
	@include curl-base($duration, $reveal-area-color, $curl-line-color, $curl-transition-color, $curl-last-color, $curl-height, $curl-width, $shadow-amount, 135deg);

	&:before {
		top: 0;
		left: 0;
		box-shadow: $shadow-distance $shadow-distance $shadow-distance rgba(0, 0, 0, $shadow-amount);
	}
}

// Curl Top Right 
@mixin curl-top-right($duration: .3s, $reveal-area-color: $jack-white, $curl-line-color: rgb(170,170,170), $curl-transition-color: rgb(204,204,204), $curl-last-color: $jack-white, $curl-height: 25px, $curl-width: 25px, $shadow-distance: 1px, $shadow-amount: .4) {
	@include curl-base($duration, $reveal-area-color, $curl-line-color, $curl-transition-color, $curl-last-color, $curl-height, $curl-width, $shadow-amount, 225deg);

	&:before {
		top: 0;
		right: 0;
		box-shadow: #{-$shadow-distance} $shadow-distance $shadow-distance rgba(0, 0, 0, $shadow-amount);
	}
}

// Icon effects //

@mixin prep-icon($identifier) {
	@include hacks;
	#{$identifier} { transform: translateZ(0); }
}

// Icon Back/Forward 

// Icon Back 
@mixin icon-back-forward($identifier, $duration, $distance) {
	@include prep-icon($identifier);
	transition-duration: $duration;

	#{$identifier} {
		transition: {
			duration: $duration;
			property: transform;
			timing-function: ease-out;
		}
	}

	@include hover {
		#{$identifier} { transform: translateX($distance); }
	}
}

// Icon Back 
@mixin icon-back($identifier: svg, $duration: .1s, $distance: 4px) {
	@include icon-back-forward($identifier, $duration, #{-$distance});
}

// Icon Forward 
@mixin icon-forward($identifier: svg, $duration: .1s, $distance: 4px) {
	@include icon-back-forward($identifier, $duration, $distance);
}

// Icon Bob/Hang 
@mixin icon-bobhang-keyframes($distance) {
	@at-root {
		@keyframes icon-bobhang {
			0% { transform: translateY($distance); }
			50% { transform: translateY(calc(#{$distance}/3)); }
			100% { transform: translateY($distance); }
		}

		@keyframes icon-bobhang-float {
			100% { transform: translateY($distance); }
		}
	}
}

@mixin icon-bobhang($identifier, $duration, $distance, $duration-ratio) {
	@include prep-icon($identifier);
	@include icon-bobhang-keyframes($distance);
	transition-duration: $duration;

	@include hover {

		#{$identifier} {
			animation: {
				name: icon-bobhang-float, icon-bobhang;
				duration: $duration, #{$duration * $duration-ratio};
				delay: 0s, $duration;
				timing-function: ease-out, ease-in-out;
				iteration-count: 1, infinite;
				fill-mode: forwards;
				direction: normal, alternate;
			}
		}
	}
}

// Icon Bob 
@mixin icon-bob($identifier: svg, $duration: .3s, $distance: 6px, $duration-ratio: 5) {
	@include icon-bobhang($identifier, $duration, #{$distance*-1}, $duration-ratio);
}

// Icon Hang 
@mixin icon-hang($identifier: svg, $duration: .3s, $distance: 6px, $duration-ratio: 5) {
	@include icon-bobhang($identifier, $duration, $distance, $duration-ratio);
}

// Icon Bounce 
@mixin icon-bounce($identifier: svg, $duration: .3s, $scale: 1.5) {
	@include prep-icon($identifier);
	transition-duration: $duration;

	#{$identifier} {
		transition: {
			duration: $duration;
			property: transform;
			timing-function: ease-out;
		}
	}

	@include hover {
		#{$identifier} {
			transform: scale($scale);
			transition-timing-function: cubic-bezier(.47,2.02,.31,-0.36);
		}
	}
}

// Icon Buzz 
@mixin icon-buzz-keyframes($distance, $angle) {
	@at-root {
		@keyframes icon-buzz {
			50% { transform: translateX($distance) rotate($angle); }
			100% { transform: translateX(#{-$distance}) rotate(#{-$angle}); }
		}
	}
}

@mixin icon-buzz($identifier: svg, $duration: .3s, $distance: 3px, $angle: 2deg) {
	@include prep-icon($identifier);
	@include icon-buzz-keyframes($distance, $angle);
	transition-duration: $duration;

	@include hover {
		#{$identifier} {
			animation: {
				name: icon-buzz;
				duration: #{$duration/2};
				timing-function: linear;
				iteration-count: infinite;
			}
		}
	}
}

// Icon Up/Down stuff 
@mixin icon-vertical-keyframes($distance) {
	@at-root {
		@keyframes icon-vertical {
			0%,
			50%,
			100% {
				transform: translateY(0);
			}
			25%,
			75% {
				transform: translateY($distance);
			}
		}
	}
}

@mixin icon-vertical($identifier, $duration, $distance) {
	@include prep-icon($identifier);
	@include icon-vertical-keyframes($distance);

	@include hover {
		#{$identifier} {
			animation: {
				name: icon-vertical;
				duration: $duration;
				timing-function: ease-out;
			}
		}
	}
}

// Icon Down 
@mixin icon-down($identifier: svg, $duration: .75s, $distance: 6px) {
	@include icon-vertical($identifier, $duration, $distance);
}

// Icon Up 
@mixin icon-up($identifier: svg, $duration: .75s, $distance: -6px) {
	@include icon-vertical($identifier, $duration, $distance);
}

// Icon Drop 
@mixin icon-drop($identifier: svg, $duration: .5s, $distance: -6px) {
	@include prep-icon($identifier);

	@at-root {
		@keyframes icon-drop {
			0% { opacity: 0; }
			50% {
				opacity: 0;
				transform: translateY(-100%);
			}
			51%,
			100% {
				opacity: 1;
			}
		}
	}

	@include hover {

		#{$identifier} {
			opacity: 0;
			transition-duration: #{$duration/2};
			animation: {
				name: icon-drop;
				duration: $duration;
				delay: #{$duration/2};
				fill-mode: forwards;
				timing-function: ease-in-out;
				timing-function: cubic-bezier(.52,1.64,.37,.66);
			}
		}
	}
}

// Icon Fade 
@mixin icon-fade($identifier: svg, $duration: .5s, $icon-color: $secondary-color) {
	@include prep-icon($identifier);

	#{$identifier} {
		transition: {
			duration: $duration;
			property: color, fill;
		}
	}

	@include hover {

		#{$identifier} {
			color: $icon-color;
			fill: $icon-color;
		}
	}
}

// Icon Float/Sink Away 
@mixin icon-floatsink-away-keyframes($distance) {
	@at-root {
		@keyframes icon-floatsink-away {
			0% { opacity: 1; }
			100% {
				opacity: 0;
				transform: translateY($distance);
			}
		}
	}
}

@mixin floatsink-away($identifier, $duration, $distance) {
	@include prep-icon($identifier);
	@include icon-floatsink-away-keyframes($distance);

	#{$identifier} {
		animation: {
			duration: $duration;
			fill-mode: forwards;
		}
	}

	@include hover {
		#{$identifier} {
			animation: {
				name: icon-floatsink;
				timing-function: ease-out;
			}
		}
	}
}

// Icon Float Away 
@mixin icon-float-away($identifier: svg, $duration: .5s, $distance: 1em) {
	@include floatsink-away($identifier, $duration, #{-$distance});
}

// Icon Sink Away 
@mixin icon-sink-away($identifier: svg, $duration: .5s, $distance: 1em) {
	@include floatsink-away($identifier, $duration, $distance)
}

// Icon Float/Sink 
@mixin icon-float-sink($identifier, $duration, $distance) {
	@include prep-icon($identifier);

	#{$identifier} {
		transition: {
			duration: $duration;
			property: transform;
			timing-function: ease-out;
		}
	}

	@include hover {
		#{$identifier} { transform: translateY($distance); }
	}
}

// Icon Float 
@mixin icon-float($identifier: svg, $duration: .3s, $distance: 4px) {
	@include icon-float-sink($identifier, $duration, #{-$distance});
}

// Icon Sink 
@mixin icon-sink($identifier: svg, $duration: .3s, $distance: 4px) {
	@include icon-float-sink($identifier, $duration, $distance);
}

// Icon Grow/Shrink 
@mixin icon-grow-shrink($identifier, $duration, $scale) {
	@include prep-icon($identifier);

	#{$identifier} {
		transition: {
			duration: $duration;
			property: transform;
			timing-function: ease-out;
		}
	}

	@include hover {

		#{$identifier} { transform: scale($scale); }
	}
}

// Icon Grow 
@mixin icon-grow($identifier: svg, $duration: .3s, $scale: 1.3) {
	@include icon-grow-shrink($identifier, $duration, $scale);
}

// Icon Shrink 
@mixin icon-shrink($identifier: svg, $duration: .3s, $scale: .8) {
	@include icon-grow-shrink($identifier, $duration, $scale);
}

// Icon Grow Rotate 
@mixin icon-grow-rotate($identifier: svg, $duration: .3s, $scale: 1.5, $rotate: 12deg) {
	@include prep-icon($identifier);

	#{$identifier} {
		transition: {
			duration: $duration;
			property: transform;
			timing-function: ease-out;
		}
	}

	@include hover {
		#{$identifier} { transform: scale($scale) rotate($rotate); }
	}
}

// Icon Pop/Push 
@mixin icon-poppush-keyframes($scale) {
	@at-root {
		@keyframes icon-poppush {
			50% { transform: scale($scale); }
		}
	}
}

@mixin icon-poppush($identifier, $duration, $scale) {
	@include prep-icon($identifier);
	@include icon-poppush-keyframes($scale);

	#{$identifier} {
		transition: {
			duration: $duration;
			property: transform;
			timing-function: ease-out;
		}
	}

	@include hover {
		#{$identifier} {
			animation: {
				name: icon-poppush;
				duration: $duration;
				timing-function: linear;
				itaration-count: 1;
			}
		}
	}
}

// Icon Pop 
@mixin icon-pop($identifier: svg, $duration: .3s, $scale: 1.5) {
	@include icon-poppush($identifier, $duration, $scale);
}

// Icon Push 
@mixin icon-push($identifier: svg, $duration: .3s, $scale: .5) {
	@include icon-poppush($identifier, $duration, $scale);
}

// Icon Pulse 
@mixin icon-pulse-keyframes($scale1, $scale2) {
	@at-root {
		@keyframes icon-pulse {
			25% { transform: scale($scale1); }
			75% { transform: scale($scale2); }
		}
	}
}

@mixin icon-pulse2-keyframes($scale) {
	@at-root {
		@keyframes icon-pulse2 {
			to { transform: scale($scale); }
		}
	}
}

@mixin icon-pulse($identifier: svg, $duration: 1s, $scale1: 1.3, $scale2: .8) {
	@include prep-icon($identifier);
	@include icon-pulse-keyframes($scale1, $scale2);

	#{$identifier} { transition-timing-function: ease-out; }

	@include hover {
		#{$identifier} {
			animation: {
				name: icon-pulse;
				duration: $duration;
				timing-function: linear;
				iteration-count: infinite;
			}
		}
	}
}

// Icon Pulse Shrink 
@mixin icon-pulse2($identifier, $duration, $scale) {
	@include prep-icon($identifier);
	@include icon-pulse2-keyframes($scale);

	#{$identifier} { transition-timing-function: ease-out; }

	@include hover {
		#{$identifier} {
			animation: {
				name: icon-pulse2;
				duration: $duration;
				timing-function: linear;
				iteration-count: infinite;
				direction: alternate;
			}
		}
	}
}

// Icon Pulse Grow 
@mixin icon-pulse-grow($identifier: svg, $duration: .3s, $scale: 1.3) {
	@include icon-pulse2($identifier, $duration, $scale);
}

// Icon Pulse Shrink 
@mixin icon-pulse-shrink($identifier: svg, $duration: .3s, $scale: .8) {
	@include icon-pulse2($identifier, $duration, $scale);
}

// Icon Rotate 
@mixin icon-rotate($identifier: svg, $duration: .3s, $rotate: 20deg) {

	#{$identifier} {
		transition: {
			duration: $duration;
			property: transform;
			timing-function: ease-out;
		}
	}

	@include hover {
		#{$identifier} { transform: rotate($rotate); }
	}
}

// Icon Spin 
@mixin icon-spin($identifier: svg, $duration: 1s) {
	@include icon-rotate($identifier, $duration, 360deg);

	#{$identifier} { transition-timing-function: ease-in-out; }
}

// Icon Wobble 
@mixin icon-wobble-keyframes($axis, $distance) {
	@at-root {
		@keyframes icon-wobble {

			@if $axis == X {
				16.65% { transform: translateX($distance); }
				33.3% { transform: translateX(#{-$distance*(5/6)}); }
				49.95% { transform: translateX(#{$distance*(2/3)}); }
				66.6% { transform: translateX(#{-$distance*(1/3)}); }
				83.25% { transform: translateX(#{$distance*(1/6)}); }
				100% { transform: translateX(0); }
			} @else if  $axis == Y {
				16.65% { transform: translateY($distance); }
				33.3% { transform: translateY(#{-$distance*(5/6)}); }
				49.95% { transform: translateY(#{$distance*(2/3)}); }
				66.6% { transform: translateY(#{-$distance*(1/3)}); }
				83.25% { transform: translateY(#{$distance*(1/6)}); }
				100% { transform: translateY(0); }
			}
		}
	}
}

@mixin icon-wobble($identifier, $duration, $distance, $axis) {
	@include prep-icon($identifier);
	@include icon-wobble-keyframes($axis, $distance);

	@include hover {
		#{$identifier} {
			animation: {
				name: icon-wobble;
				duration: $duration*3;
				timing-function: ease-in-out;
				iteration-count: 1;
			}
		}
	}
}

// Icon Wobble Vertical 
@mixin icon-wobble-vertical($identifier: svg, $duration: .3s, $distance: 6px, $axis: Y) { 
	@include icon-wobble($identifier, $duration, $distance, $axis);
}

// Icon Wobble Horizontal 
@mixin icon-wobble-horizontal($identifier: svg, $duration: .3s, $distance: 6px, $axis: X) {
	@include icon-wobble($identifier, $duration, $distance, $axis);
}

// Shadow and Glow Transitions

// Box Shadow Inset 
@mixin box-shadow-inset($duration: .3s, $shadow-color: $jack-black, $shadow-intensity: .6, $shadow-distance: 2px, $shadow-radius: 2px) {
	@include hacks;
	transition: {
		duration: $duration;
		property: box-shadow;
	}

	box-shadow: inset 0 0 0 $shadow-color,
		0 0 1px rgba(0, 0, 0, 0); // Hack to improve aliasing on mobile/tablet devices 

	@include hover {
		box-shadow: inset $shadow-distance $shadow-distance $shadow-radius rgba($shadow-color, $shadow-intensity),
		0 0 1px rgba(0, 0, 0, 0); // Hack to improve aliasing on mobile/tablet devices 
	}
}

// Box Shadow Outset 
@mixin box-shadow-outset($duration: .3s, $shadow-color: $jack-black, $shadow-intensity: .6, $shadow-distance: 2px, $shadow-radius: 2px) {
	@include hacks;
	transition: {
		duration: $duration;
		property: box-shadow;
	}

	@include hover {
		box-shadow: $shadow-distance $shadow-distance $shadow-radius rgba($shadow-color, $shadow-intensity);
	}
}

// Float Shadow 
@mixin float-shadow($duration: .3s, $shadow-width: 90%, $distance: 5px, $shadow-color: $jack-black, $shadow-intensity: .35) {
	@include hacks;
	z-index: 0;
	transition: {
		duration: $duration;
		property: transform;
	}

	@include mask {
		pointer-events: none;
		z-index: -1;
		top: 100%;
		left: calc((100% - #{$shadow-width})/2);
		height: $distance*2;
		width: $shadow-width;
		opacity: 0;
		background: radial-gradient(ellipse at center, rgba($shadow-color,$shadow-intensity) 0%,rgba($shadow-color,0) 80%);
		transition: {
			duration: $duration;
			property: transform, opacity;
		}
	}

	@include hover {
		transform: translateY(#{-$distance}); 

		&:before {
			opacity: 1;
			transform: translateY($distance);
		}
	}
}

// Glow 
@mixin glow($duration: .3s, $shadow-color: $jack-black, $shadow-intensity: .6, $shadow-radius: 8px) {
	@include box-shadow-outset($duration, $shadow-color, $shadow-intensity, 0, $shadow-radius);
}

// Shadow 
@mixin shadow($duration: .3s, $shadow-distance: 10px, $shadow-color: $jack-black, $shadow-intensity: .6) {
	@include hacks;
	transition: {
		duration: $duration;
		property: box-shadow;
	}

	@include hover {
		box-shadow: 0 $shadow-distance $shadow-distance #{-$shadow-distance} rgba($shadow-color, $shadow-intensity);
	}
}

// Grow Shadow 
@mixin grow-shadow($duration: .3s, $shadow-distance: 10px, $shadow-color: $jack-black, $shadow-intensity: .5, $scale: 1.1) {
	@include shadow($duration, $shadow-distance, $shadow-color, $shadow-intensity);
	transition-property: box-shadow, transform;

	@include hover {
		transform: scale($scale);
	}
}

// Shadow Radial 
@mixin shadow-radial($duration: .3s, $shadow-distance: 5px, $shadow-color: $jack-black, $shadow-intensity: .6){
	@include hacks;
	@include mask("before");
	@include mask("after");

	&:before,
	&:after {
		pointer-events: none;
		left: 0;
		width: 100%;
		box-sizing: border-box;
		background-repeat: no-repeat;
		height: $shadow-distance;
		opacity: 0;
		transition: {
			duration: $duration;
			property: opacity;
		}
	}

	&:before {
		bottom: 100%;
		background: radial-gradient(ellipse at 50% 150%, rgba($shadow-color, $shadow-intensity) 0%, rgba($shadow-color, 0) 80%);
	}

	&:after {
		top: 100%;
		background: radial-gradient(ellipse at 50% -50%, rgba($shadow-color, $shadow-intensity) 0%, rgba($shadow-color, 0) 80%);
	}

	@include hover {
		&:before,
		&:after {
			opacity: 1;
		}
	}
}

// Speech Bubble Transitions

// Bubble base 
@mixin bubble-base($duration) {
	@include hacks;
	@include mask {
		z-index: -1;
		border-style: solid;
		transition: {
			duration: $duration;
			property: transform;
		}
	}
}

// Bubble Bottom 
@mixin bubble-bottom($duration: .3s, $tip-height: 10px, $tip-width: 10px, $tip-color: $primary-color) {
	@include bubble-base($duration);

	&:before {
		left: calc(50% - #{$tip-width});
		bottom: 0;
		border-width: $tip-height $tip-width 0 $tip-width;
		border-color: $tip-color transparent transparent transparent;
	}

	@include hover {
		&:before { transform: translateY($tip-height); }
	}
}

// Bubble Top 
@mixin bubble-top($duration: .3s, $tip-height: 10px, $tip-width: 10px, $tip-color: $primary-color) {
	@include bubble-base($duration);

	&:before {
		left: calc(50% - #{$tip-width});
		top: 0;
		border-width: 0 $tip-width $tip-height $tip-width;
		border-color: transparent transparent $tip-color transparent;
	}

	@include hover {
		&:before { transform: translateY(-($tip-height)); }
	}
}

// Bubble Left 
@mixin bubble-left($duration: .3s, $tip-height: 10px, $tip-width: 10px, $tip-color: $primary-color) {
	@include bubble-base($duration);

	&:before {
		top: calc(50% - #{$tip-height});
		left: 0;
		border-width: $tip-height $tip-width $tip-height 0;
		border-color: transparent $tip-color transparent transparent;
	}

	@include hover {
		&:before { transform: translateX(-($tip-width)); }
	}
}

// Bubble Right 
@mixin bubble-right($duration: .3s, $tip-height: 10px, $tip-width: 10px, $tip-color: $primary-color) {
	@include bubble-base($duration);

	&:before {
		top: calc(50% - #{$tip-height});
		right: 0;
		border-width: $tip-height 0 $tip-height $tip-width;
		border-color: transparent transparent transparent $tip-color;
	}

	@include hover {
		&:before { transform: translateX($tip-width); }
	}
}

// Bubble Float Bottom 
@mixin bubble-float-bottom($duration: .3s, $tip-height: 10px, $tip-width: 10px, $tip-color: $primary-color) {
	@include bubble-bottom($duration, $tip-height, $tip-width, $tip-color);
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover {
		transform: translateY(-($tip-height));
	}
}

// Bubble Float Top 
@mixin bubble-float-top($duration: .3s, $tip-height: 10px, $tip-width: 10px, $tip-color: $primary-color) {
	@include bubble-top($duration, $tip-height, $tip-width, $tip-color);
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover {
		transform: translateY($tip-height);
	}
}

// Bubble Float Left 
@mixin bubble-float-top($duration: .3s, $tip-height: 10px, $tip-width: 10px, $tip-color: $primary-color) {
	@include bubble-left($duration, $tip-height, $tip-width, $tip-color);
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover {
		transform: translateX($tip-width);
	}
}

// Bubble Float Right 
@mixin bubble-float-top($duration: .3s, $tip-height: 10px, $tip-width: 10px, $tip-color: $primary-color) {
	@include bubble-right($duration, $tip-height, $tip-width, $tip-color);
	transition: {
		duration: $duration;
		property: transform;
	}

	@include hover {
		transform: translateX(-($tip-width));
	}
}
